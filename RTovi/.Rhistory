LE="LE",
FCO2="NEE",
TA="Tair",
USTAR="Ustar",
RH="rH",
SW_IN="Rg",
TA="Tair",
TS="Tsoil")
for (variable in variables) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
ncVariables[[reddyProcMap[variableName]]] <- ncvar_get(ncdata, variable)
}
}
startDate <- ncatt_get(ncdata, 0, "full_output_start_date")
if (!startDate$hasatt) {
startDate <- ncatt_get(ncdata, 0, "biomet_start_date")
}
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
df$DateTime <- as.POSIXct(ncdata$dim$time$vals, tz="GMT", origin=startDate$value)
ncdata <- nc_open("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
variables = attributes(ncdata$var)$names
ncVariables = list()
reddyProcMap = list(
H="H",
LE="LE",
FCO2="NEE",
TA="Tair",
USTAR="Ustar",
RH="rH",
SW_IN="Rg",
TA="Tair",
TS="Tsoil")
for (variable in variables) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
ncVariables[[reddyProcMap[[variableName]]]] <- ncvar_get(ncdata, variable)
}
}
startDate <- ncatt_get(ncdata, 0, "full_output_start_date")
if (!startDate$hasatt) {
startDate <- ncatt_get(ncdata, 0, "biomet_start_date")
}
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
df$DateTime <- as.POSIXct(ncdata$dim$time$vals, tz="GMT", origin=startDate$value)
head(df)
ncdata <- nc_open("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
variables = attributes(ncdata$var)$names
ncVariables = list()
reddyProcMap = list(
H="H",
LE="LE",
FCO2="NEE",
TA="Tair",
USTAR="Ustar",
RH="rH",
SW_IN="Rg",
TA="Tair",
TS="Tsoil")
for (variable in variables) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
startDate <- ncatt_get(ncdata, 0, "full_output_start_date")
if (!startDate$hasatt) {
startDate <- ncatt_get(ncdata, 0, "biomet_start_date")
}
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
df$DateTime <- as.POSIXct(ncdata$dim$time$vals, tz="GMT", origin=startDate$value)
head(df)
head(DEGebExample)
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasTA <- 'Tair' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
!hasVPD && hasRH && hasTA
EddyProc <- fCalcVPDfromRHandTair(df$rH df$Tair)
summary(df)
EddyProc <- fCalcVPDfromRHandTair(df$rH, df$Tair)
names(df)
ncVariables = list()
reddyProcMap = list(
H="H",
LE="LE",
FCO2="NEE",
TA="Tair",
USTAR="Ustar",
RH="rH",
SW_IN="Rg",
TA="Tair",
TS="Tsoil")
for (variable in variables) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
startDate <- ncatt_get(ncdata, 0, "full_output_start_date")
if (!startDate$hasatt) {
startDate <- ncatt_get(ncdata, 0, "biomet_start_date")
}
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
df$DateTime <- as.POSIXct(ncdata$dim$time$vals, tz="GMT", origin=startDate$value)
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
EddyProc <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
names(df)
eddyProc <- sEddyProc$new('US-Adam', names(df))
eddyProc <- sEddyProc$new('US-Adam', df, names(df))
head(df)
ncatt_get(ncdata, 0)
timeStep <- ncatt_get(ncdata, 0, "time_step")
timeStep
startDate
as.POSIXct(startDate$value)
as.numeric("101")
?apply
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tmp = as.POSIXct(startDate$value) + (as.numeric(timeStep$value) * ncdata$dim$time$vals)
tmp[1:10]
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
tmp = as.POSIXct(startDate$value) + (tsInSeconds * ncdata$dim$time$vals)
tmp[1:10]
tmp = as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
tmp[1:10]
tmp[1]
tmp[1] + (30 * 60)
ncdata$dim$time$vals[1:5]
ncdata$dim$time$vals[1:5] - 1
ts <- 30 * 60
ts
(ncdata$dim$time$vals[1:5] - 1) * ts
5400 - 3600
tmp = ncdata$dim$time$vals[1:5] - 1
(tmp * ts)
(tmp * ts) + as.POSIXct(startDate$value)
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
tmp = as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
df$DateTime <- as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
head(df)
ncdata <- nc_open("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
variables = attributes(ncdata$var)$names
ncVariables = list()
reddyProcMap = list(
H="H",
LE="LE",
FCO2="NEE",
TA="Tair",
USTAR="Ustar",
RH="rH",
SW_IN="Rg",
TA="Tair",
TS="Tsoil")
for (variable in variables) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
timeStep <- ncatt_get(ncdata, 0, "time_step")
startDate <- ncatt_get(ncdata, 0, "full_output_start_date")
if (!startDate$hasatt) {
startDate <- ncatt_get(ncdata, 0, "biomet_start_date")
}
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
if (!timeStep$hasatt) {
stop("NetCDF file is does not indicate time_step")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
tmp = as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
df$DateTime <- as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
eddyProc <- sEddyProc$new('US-Adam', df, names(df))
str(df)
str(DEGebExample)
?str
str(df, give.head=F)
str(DEGebExample)
str(df)
eddyProc <- sEddyProc$new('US-Adam', df, names(df))
columns <- names(df)[!names(df) %in% c('DateTime')]
columns
eddyProc <- sEddyProc$new('US-Adam', df, columns)
library(dplyr)
EddyProc$sPlotFingerprintY('NEE', Year.i=2013)
attributes(EddyProc)
DEGebExample$VPD <- fCalcVPDfromRHandTair(DEGebExample$rH, DEGebExample$Tair)
EddyProc.C <- sEddyProc$new('DE-Geb', DEGebExample, c('NEE','Rg','Tair','VPD', 'Ustar'))
attributes(EddyProc.C)
attributes(DEGebExample)
attributes(df)
columns
EddyProc2.C <- sEddyProc$new('US-Adam', df, columns)
attributes(EddyProc.C)
attributes(EddyProc2.C)
EddyProc.C$sEstUstarThreshold()
EddyProc2.C$sEstUstarThreshold()
columns <- names(df)[!names(df) %in% c('DateTime')]
eddyProc <- sEddyProc$new('US-Adam', df, columns)
attributes(eddyProc)
eddyProc$sEstUstarThreshold()
eddyProc$sEstUstarThresholdDistribution()
myFn <- function() {
return(10)
}
myFn()
?ifelse
netCDFToREddyProcDF <- function(filePath, siteName="US-LICOR") {
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
ncdata <- nc_open(filePath)
ncVariables = list()
for (variable in attributes(ncdata$var)$names) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
timeStep <- ncatt_get(ncdata, 0, "time_step")
startDate <- ifelse(ncatt_get(ncdata, 0, "full_output_start_date")$hasatt,
ncatt_get(ncdata, 0, "full_output_start_date"),
ncatt_get(ncdata, 0, "biomet_start_date"))
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
if (!timeStep$hasatt) {
stop("NetCDF file is does not indicate time_step")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
df$DateTime <- as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
dfToREddyProc <- function(df) {
columns <- names(df)[!names(df) %in% c('DateTime')]
eddyProc <- sEddyProc$new(siteName, df, columns)
return(eddyProc)
}
df <- netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
eddyProc <- dfToREddyProc(df)
netCDFToREddyProcDF <- function(filePath) {
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
ncdata <- nc_open(filePath)
ncVariables = list()
for (variable in attributes(ncdata$var)$names) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
timeStep <- ncatt_get(ncdata, 0, "time_step")
startDate <- ifelse(ncatt_get(ncdata, 0, "full_output_start_date")$hasatt,
ncatt_get(ncdata, 0, "full_output_start_date"),
ncatt_get(ncdata, 0, "biomet_start_date"))
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
if (!timeStep$hasatt) {
stop("NetCDF file is does not indicate time_step")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
df$DateTime <- as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
dfToREddyProc <- function(df, siteName="US-LICOR") {
columns <- names(df)[!names(df) %in% c('DateTime')]
eddyProc <- sEddyProc$new(siteName, df, columns)
return(eddyProc)
}
df <- netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
eddyProc <- dfToREddyProc(df)
netCDFToREddyProcDF <- function(filePath) {
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
ncdata <- nc_open(filePath)
ncVariables = list()
for (variable in attributes(ncdata$var)$names) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
timeStep <- ncatt_get(ncdata, 0, "time_step")
startDate <- ifelse(ncatt_get(ncdata, 0, "full_output_start_date")$hasatt,
ncatt_get(ncdata, 0, "full_output_start_date"),
ncatt_get(ncdata, 0, "biomet_start_date"))
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
if (!timeStep$hasatt) {
stop("NetCDF file is does not indicate time_step")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
df$DateTime <- as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
dfToREddyProc <- function(df, siteName="US-LICOR") {
columns <- names(df)[!names(df) %in% c('DateTime')]
eddyProc <- sEddyProc$new(siteName, df, columns)
return(eddyProc)
}
df <- netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
library(ncdf4)
library(REddyProc)
filePath = "/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc"
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
ncdata <- nc_open(filePath)
ncVariables = list()
for (variable in attributes(ncdata$var)$names) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
timeStep <- ncatt_get(ncdata, 0, "time_step")
startDate <- ifelse(ncatt_get(ncdata, 0, "full_output_start_date")$hasatt,
ncatt_get(ncdata, 0, "full_output_start_date"),
ncatt_get(ncdata, 0, "biomet_start_date"))
timeStep
startDate
ncatt_get(ncdata, 0, "full_output_start_date")
ncatt_get(ncdata, 0, "full_output_start_date")$hasatt
netCDFToREddyProcDF <- function(filePath) {
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
ncdata <- nc_open(filePath)
ncVariables = list()
for (variable in attributes(ncdata$var)$names) {
nameParts = unlist(strsplit(variable, '/'))
variableName <- nameParts[length(nameParts)]
variableName <- sub("(_\\d){3}$", "", variableName)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName = reddyProcMap[[variableName]]
ncVariables[[rEddyProcName]] <- ncvar_get(ncdata, variable)
}
}
timeStep <- ncatt_get(ncdata, 0, "time_step")
startDate <- ncatt_get(ncdata, 0, "full_output_start_date")
if (!startDate$hasatt) {
startDate <- ncatt_get(ncdata, 0, "biomet_start_date")
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
}
if (!timeStep$hasatt) {
stop("NetCDF file is does not indicate time_step")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
df$DateTime <- as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
dfToREddyProc <- function(df, siteName="US-LICOR") {
columns <- names(df)[!names(df) %in% c('DateTime')]
eddyProc <- sEddyProc$new(siteName, df, columns)
return(eddyProc)
}
df <- netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
eddyProc <- dfToREddyProc(df)
eddyProc$sEstUstarThreshold()
head(df)
tail(df)
tmp <- data.frame(A=c(1,2,3,4,5), B=c(6,7,8,9,10))
tmp
tmp[1:4, ]
dims(df)
dim(df)
nrows <- dim(df)[1]
nrows
eddyProc <- dfToREddyProc(df[1:(nrows-1),])
eddyProc$sEstUstarThreshold()
tail(df[1:(nrows-1),])
