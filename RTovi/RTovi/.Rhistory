install.packages('roxygen')
install.packages('roxygen2')
library(roxygen2)
library(RTovi)
detach("package:RTovi", unload=TRUE)
library("RTovi", lib.loc="~/Code/R/RTovi/RTovi/bin/R/R-3.4.3/library")
help(REddyProc)
?REddyProc
??REddyProc
library(RTovi)
library(RTovi)
df = netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
library(RTovi)
df = netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
library(RTovi)
df = netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
library(RTovi)
df = netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
library(RTovi)
df = netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
library(RTovi)
df = netCDFToREddyProcDF("/Users/adammcquistan/Code/R/playing-with-tovi-data/data/nc_file.nc")
head(df)
summary(df)
serializeJSON(df)
library(jsonlite)
serializeJSON(df)
toJSON(df)
jsoncars <- toJSON(mtcars)
summary(mtcars)
install.packages('rjson')
library(rjson)
rjson::toJSON(df)
?install.packages
install.packages('httr')
library(httr)
dataFileId = 92
url <- paste("http://localhost:8000/data_files/", dataFileId, "/")
url
url <- paste("http://localhost:8000/data_files/", dataFileId, "/", sep="")
url
response <- GET(url)
response
attributes(response)
response$content
library(rjson)
toJSON(content(response, "text"))
response <- GET("http://localhost:8000/data_files/")
content(response, "text")
response
url <- paste("http://localhost:8000/data_files/", dataFileId, "/?excludeData=true", sep="")
response <- GET(url)
response <- GET(url)
response
fromJSON(content(response, "text"))
?content
fromJSON(content(response))
content(response)
response <- GET(url)
response
content(response)
attributes(content(response))$names
data <- content(response)
data$file
status_code(response)
url <- paste("http://localhost:8000/data_files/", dataFileId, "/?excludeData=true&includeAbsFiles=true", sep="")
response <- GET(url)
response <- GET(url)
data <- content(response)
attributes(data)$names
file <- data$absFile
file
fetchToviDataFile <- function(dataFileId) {
url <- paste("http://localhost:8000/data_files/", dataFileId, "/?excludeData=true&includeAbsFiles=true", sep="")
response <- GET(url)
if (!status_code(response) == 200) {
stop("Failed request for datafile")
}
data <- content(response)
file <- data$absFile
return(file)
}
fetchToviDataFilePath <- function(dataFileId) {
url <- paste("http://localhost:8000/data_files/", dataFileId, "/?excludeData=true&includeAbsFiles=true", sep="")
response <- GET(url)
if (!status_code(response) == 200) {
stop("Failed request for datafile")
}
data <- content(response)
file <- data$absFile
return(file)
}
fetchToviDataFilePath(92)
netCDFToDF <- function(filePath) {
if(!requireNamespace("ncdf4", quietly=TRUE)) {
stop("Package 'ncdf4' required in this function.  Please install it.")
}
ncdata <- nc_open(filePath)
ncVariables = list()
for (variable in attributes(ncdata$var)$names) {
nameParts <- unlist(strsplit(variable, '/'))
if (length(nameParts) == 2) {
variableName <- nameParts[length(nameParts)]
ncVariables[[variableName]] <- ncvar_get(ncdata, variable)
}
}
timeStep <- ncatt_get(ncdata, 0, "time_step")
startDate <- ncatt_get(ncdata, 0, "full_output_start_date")
if (!startDate$hasatt) {
startDate <- ncatt_get(ncdata, 0, "biomet_start_date")
if (!startDate$hasatt) {
stop("NetCDF file is has neither full_output_start_date or biomet_start_date")
}
}
if (!timeStep$hasatt) {
stop("NetCDF file is does not indicate time_step")
}
df <- as.data.frame(ncVariables, stringsAsFactors=F)
tsInSeconds <- as.numeric(timeStep$value) * 60
df$DateTime <- as.POSIXct(startDate$value) + (tsInSeconds * (ncdata$dim$time$vals - 1))
nc_close(ncdata)
return(df)
}
getToviDataFrame <- function(dataFileId) {
filePath <- fetchToviDataFilePath(dataFileId)
df <- netCDFToDF(filePath)
return(df)
}
df <- getToviDataFrame(92)
library(ncdf4)
library(REddyProc)
library(httr)
library(rjson)
df <- getToviDataFrame(92)
head(df)
netCDFToREddyProcDF <- function(filePath) {
if(!requireNamespace("ncdf4", quietly=TRUE)) {
stop("Package 'ncdf4' required in this function.  Please install it.")
}
if(!requireNamespace("REddyProc", quietly=TRUE)) {
stop("Package 'REddyProc' required in this function.  Please install it.")
}
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
df <- netCDFToDF(filePath)
# look for REddyProc variables in dataframe, build a list of those that are present
# and rename them where needed, afterwards subset only the REddyProc variables
reddyProcVariables = c()
for (variable in names(df)) {
if (variable == 'DateTime') {
reddyProcVariables <- c(reddyProcVariables, variable)
} else {
variableName <- sub("(_\\d){3}$", "", variable)
if (variableName %in% names(reddyProcMap)) {
reddyProcVariables <- c(reddyProcVariables, variableName)
names(df)[names(df) == variable] <- variableName
}
}
}
df <- df[reddyProcVariables, ]
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
netCDFToREddyProcDF <- function(df) {
if(!requireNamespace("ncdf4", quietly=TRUE)) {
stop("Package 'ncdf4' required in this function.  Please install it.")
}
if(!requireNamespace("REddyProc", quietly=TRUE)) {
stop("Package 'REddyProc' required in this function.  Please install it.")
}
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
df <- netCDFToDF(filePath)
# look for REddyProc variables in dataframe, build a list of those that are present
# and rename them where needed, afterwards subset only the REddyProc variables
reddyProcVariables = c()
for (variable in names(df)) {
if (variable == 'DateTime') {
reddyProcVariables <- c(reddyProcVariables, variable)
} else {
variableName <- sub("(_\\d){3}$", "", variable)
if (variableName %in% names(reddyProcMap)) {
reddyProcVariables <- c(reddyProcVariables, variableName)
names(df)[names(df) == variable] <- variableName
}
}
}
df <- df[reddyProcVariables, ]
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
rEddyProcDF <- netCDFToREddyProcDF(df)
netCDFToREddyProcDF <- function(filePath) {
if(!requireNamespace("ncdf4", quietly=TRUE)) {
stop("Package 'ncdf4' required in this function.  Please install it.")
}
if(!requireNamespace("REddyProc", quietly=TRUE)) {
stop("Package 'REddyProc' required in this function.  Please install it.")
}
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
df <- netCDFToDF(filePath)
# look for REddyProc variables in dataframe, build a list of those that are present
# and rename them where needed, afterwards subset only the REddyProc variables
reddyProcVariables = c()
for (variable in names(df)) {
if (variable == 'DateTime') {
reddyProcVariables <- c(reddyProcVariables, variable)
} else {
variableName <- sub("(_\\d){3}$", "", variable)
if (variableName %in% names(reddyProcMap)) {
reddyProcVariables <- c(reddyProcVariables, variableName)
names(df)[names(df) == variable] <- variableName
}
}
}
df <- df[reddyProcVariables, ]
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
x <- "Adam"
class(x)
class(x) == "character"
is.character(x)
netCDFToREddyProcDF <- function(x) {
if(!requireNamespace("ncdf4", quietly=TRUE)) {
stop("Package 'ncdf4' required in this function.  Please install it.")
}
if(!requireNamespace("REddyProc", quietly=TRUE)) {
stop("Package 'REddyProc' required in this function.  Please install it.")
}
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
if (is.character(x)) {
df <- netCDFToDF(filePath)
}
if (is.data.frame(x)) {
df <- x
}
# look for REddyProc variables in dataframe, build a list of those that are present
# and rename them where needed, afterwards subset only the REddyProc variables
reddyProcVariables = c()
for (variable in names(df)) {
if (variable == 'DateTime') {
reddyProcVariables <- c(reddyProcVariables, variable)
} else {
variableName <- sub("(_\\d){3}$", "", variable)
if (variableName %in% names(reddyProcMap)) {
reddyProcVariables <- c(reddyProcVariables, variableName)
names(df)[names(df) == variable] <- variableName
}
}
}
df <- df[reddyProcVariables, ]
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
head(df)
rEddyProcDF <- netCDFToREddyProcDF(df)
head(rEddyProcDF)
x <- df
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
if (is.character(x)) {
df <- netCDFToDF(filePath)
}
if (is.data.frame(x)) {
df <- x
}
class(df)
names(df)
# look for REddyProc variables in dataframe, build a list of those that are present
# and rename them where needed, afterwards subset only the REddyProc variables
reddyProcVariables = c()
netCDFToREddyProcDF <- function(x) {
if(!requireNamespace("ncdf4", quietly=TRUE)) {
stop("Package 'ncdf4' required in this function.  Please install it.")
}
if(!requireNamespace("REddyProc", quietly=TRUE)) {
stop("Package 'REddyProc' required in this function.  Please install it.")
}
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
if (is.character(x)) {
df <- netCDFToDF(filePath)
}
if (is.data.frame(x)) {
df <- x
}
# look for REddyProc variables in dataframe, build a list of those that are present
# and rename them where needed, afterwards subset only the REddyProc variables
reddyProcVariables = c()
for (variable in names(df)) {
if (variable == 'DateTime') {
reddyProcVariables <- c(reddyProcVariables, variable)
} else {
variableName <- sub("(_\\d){3}$", "", variable)
if (variableName %in% names(reddyProcMap)) {
reddyProcVariables <- c(reddyProcVariables, variableName)
names(df)[names(df) == variable] <- variableName
}
}
}
df <- df[,reddyProcVariables]
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
rEddyProcDF <- netCDFToREddyProcDF(df)
head(rEddyProcDF)
netCDFToREddyProcDF <- function(x) {
if(!requireNamespace("ncdf4", quietly=TRUE)) {
stop("Package 'ncdf4' required in this function.  Please install it.")
}
if(!requireNamespace("REddyProc", quietly=TRUE)) {
stop("Package 'REddyProc' required in this function.  Please install it.")
}
reddyProcMap = list(
H="H", LE="LE", FCO2="NEE", TA="Tair", USTAR="Ustar",
RH="rH", SW_IN="Rg", TA="Tair", TS="Tsoil")
if (is.character(x)) {
df <- netCDFToDF(filePath)
}
if (is.data.frame(x)) {
df <- x
}
# look for REddyProc variables in dataframe, build a list of those that are present
# and rename them where needed, afterwards subset only the REddyProc variables
reddyProcVariables = c()
for (variable in names(df)) {
if (variable == 'DateTime') {
reddyProcVariables <- c(reddyProcVariables, variable)
} else {
variableName <- sub("(_\\d){3}$", "", variable)
if (variableName %in% names(reddyProcMap)) {
rEddyProcName <- reddyProcMap[[variableName]]
reddyProcVariables <- c(reddyProcVariables, rEddyProcName)
names(df)[names(df) == variable] <- rEddyProcName
}
}
}
df <- df[,reddyProcVariables]
# if contains TA or TS convert from K to C
hasTA <- 'Tair' %in% names(df)
hasTS <- 'Tsoil' %in% names(df)
if (hasTA) {
df$Tair <- df$Tair - 273
}
if (hasTS) {
df$Tsoil <- df$Tsoil - 273
}
#Check to see if VPD is in data
hasRH <- 'rH' %in% names(df)
hasVPD <- 'VPD' %in% names(df)
if (!hasVPD && hasRH && hasTA) {
df$VPD <- fCalcVPDfromRHandTair(df$rH, df$Tair)
}
return (df)
}
rEddyProcDF <- netCDFToREddyProcDF(df)
head(rEddyProcDF)
